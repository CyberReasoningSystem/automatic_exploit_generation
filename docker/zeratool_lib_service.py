#!/usr/bin/env python3

import os
import pickle
import stat
import tempfile
import time
from concurrent import futures

import exploit_pb2
import exploit_pb2_grpc
import grpc
from zeratool_lib import ZeratoolInputStreams, exploit

YEAR_IN_SECONDS = 365 * 60 * 60 * 24


def _create_temp_binary(content: bytes) -> tempfile.TemporaryFile:
    binary = tempfile.TemporaryFile()

    binary.write(content)
    binary.flush()

    os.chmod(binary.name, stat.S_IXUSR)

    return binary


class EService(exploit_pb2_grpc.ExploitServiceServicer):
    def Exploit(self, request, _):
        temp_file = _create_temp_binary(request.binary)

        input_stream = ZeratoolInputStreams(request.input_stream)
        overflow_only = request.overflow_only
        format_only = request.format_only
        win_funcs_used = request.serialized_win_funcs.split(",")

        result = exploit(
            temp_file.name,
            input_stream,
            overflow_only=overflow_only,
            format_only=format_only,
            win_funcs=win_funcs_used,
        )

        return exploit_pb2.exploit(pickledExploit=pickle.dumps(result))


def serve() -> None:
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=4))
    exploit_pb2_grpc.add_ExploitServiceServicer_to_server(EService(), server)
    server.add_insecure_port("[::]:13000")
    server.start()
    try:
        # server.start() will not block.
        while True:
            time.sleep(YEAR_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)


if __name__ == "__main__":
    serve()
