import typing
from enum import Enum

from commons.input_streams import InputStreams
from commons.mitigations import Mitigations
from commons.weaknesses import Weaknesses

from automatic_exploit_generation.exploiters import BaseExploiter
from automatic_exploit_generation.exploiters.zeratool import Zeratool


class Exploiters(Enum):
    ZERATOOL = Zeratool


def create_exploiter_by_name(
    name: str,
    filename: str,
    input_streams: typing.List[InputStreams],
    mitigations: typing.List[Mitigations],
    weakness: Weaknesses,
) -> BaseExploiter:
    configured_exploiter = getattr(Exploiters, name).value

    return configured_exploiter(filename, input_streams, mitigations, weakness)


def get_suitable_exploiters(
    filename: str,
    input_streams: typing.List[InputStreams],
    mitigations: typing.List[Mitigations],
    weakness: Weaknesses,
) -> typing.Generator[BaseExploiter, None, None]:
    for exploiter in Exploiters:
        exploiter_inst = create_exploiter_by_name(
            exploiter.name, filename, input_streams, mitigations, weakness
        )

        if exploiter_inst.is_exploitaion_supported():
            yield exploiter_inst
