# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from automatic_exploit_generation.exploiters.zeratool.protobuf import exploit_pb2 as automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2


class ExploitServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Exploit = channel.unary_unary(
                '/opencrs.ExploitService/Exploit',
                request_serializer=automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploitationRequest.SerializeToString,
                response_deserializer=automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploit.FromString,
                )


class ExploitServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Exploit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExploitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Exploit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exploit,
                    request_deserializer=automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploitationRequest.FromString,
                    response_serializer=automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploit.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opencrs.ExploitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExploitService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Exploit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opencrs.ExploitService/Exploit',
            automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploitationRequest.SerializeToString,
            automatic__exploit__generation_dot_exploiters_dot_zeratool_dot_protobuf_dot_exploit__pb2.exploit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
