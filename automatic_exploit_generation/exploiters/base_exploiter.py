import abc
import typing

from commons.exploit import Exploit
from commons.input_streams import InputStreams
from commons.mitigations import Mitigations
from commons.weaknesses import Weaknesses


class BaseExploiter:
    _filename: str
    _input_streams: typing.List[InputStreams]
    _mitigations: typing.List[Mitigations]
    _weakness: Weaknesses
    _is_support_checked: bool
    _exploitaion_supported: bool

    def __init__(
        self,
        filename: str,
        input_streams: typing.List[InputStreams],
        mitigations: typing.List[Mitigations],
        weakness: Weaknesses,
    ) -> None:
        self._filename = filename
        self._input_streams = input_streams
        self._mitigations = mitigations
        self._weakness = weakness
        self._is_support_checked = False

    @abc.abstractmethod
    def _is_exploitation_supported(self) -> bool:
        raise NotImplementedError()

    def is_exploitaion_supported(self) -> bool:
        if self._is_support_checked:
            return self._exploitaion_supported

        self._is_support_checked = True
        self._exploitaion_supported = self._is_exploitation_supported()

        return self._exploitaion_supported

    @abc.abstractmethod
    def _exploit(self) -> Exploit:
        raise NotImplementedError()

    def exploit(self) -> Exploit:
        if not self._is_exploitation_supported():
            return None

        return self._exploit()
