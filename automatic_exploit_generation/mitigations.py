import typing
from enum import Enum, auto

from pwn import ELF


class Mitigation(Enum):
    ASLR = auto()
    NX = auto()
    CANARY = auto()
    RELRO = auto()
    PIE = auto()
    FORTIFY = auto()
    ASAN = auto()


class ContextAspects(Enum):
    EXECSTACK = auto()
    RWX_SEGMENTS = auto()


def get_mitigations(binary: ELF) -> list(Mitigation):
    yield from get_members_from_loaded_elf(binary, Mitigation)


def get_context_aspects(binary: ELF) -> list(ContextAspects):
    yield from get_members_from_loaded_elf(binary, ContextAspects)


def get_members_from_loaded_elf(
    binary: ELF, members_enum: Enum
) -> typing.Generator[Enum, None, None]:
    for member in members_enum:
        member_name = member.name
        if getattr(binary, member_name.lower(), False):
            yield members_enum[member_name]
