import typing

import click
import hexdump
from commons.input_streams import InputStreams
from commons.mitigations import Mitigations
from commons.weaknesses import Weaknesses

from automatic_exploit_generation.exploiter_generator import (
    Exploiters,
    create_exploiter_by_name,
    get_suitable_exploiters,
)


def _translate_exploiter_class_to_name(exploiter: typing.Type) -> str:
    return Exploiters(exploiter.__class__).name


@click.group()
def cli() -> None:
    """Exploits vulnerabilities in executables."""


@cli.command(help="Exploits vulnerabilities.")
@click.option(
    "--exploiter",
    type=click.Choice([exploiter.name for exploiter in Exploiters]),
    required=True,
    help="Used exploiter",
)
@click.option(
    "--elf",
    type=click.Path(exists=True),
    required=True,
    help="Executables to be exploited",
)
@click.option(
    "--stream",
    type=click.Choice([stream.name for stream in InputStreams]),
    required=True,
    multiple=True,
    help="Input streams of the executable",
)
@click.option(
    "--mitigation",
    type=click.Choice([mitigation.name for mitigation in Mitigations]),
    required=True,
    multiple=True,
    help="Mitigation present in the executable",
)
@click.option(
    "--weakness",
    type=click.Choice([exploiter.name for exploiter in Weaknesses]),
    required=True,
    help="Weakness to be exploited",
)
def exploit(
    exploiter: str,
    elf: str,
    stream: typing.List[str],
    mitigation: typing.List[str],
    weakness: str,
) -> None:
    input_streams = [getattr(InputStreams, s) for s in stream]
    mitigations = [getattr(Mitigations, m) for m in mitigation]
    weakness_enum = getattr(Weaknesses, weakness)

    exploiter = create_exploiter_by_name(
        exploiter, elf, input_streams, mitigations, weakness_enum
    )

    generated_exploit = exploiter.exploit()
    if generated_exploit:
        print(
            "The exploiter could generate an exploit with the outcome of"
            f" {generated_exploit.outcome.name} and the following payloads:\n"
        )
        hexdump.hexdump(generated_exploit.payload)
    else:
        print("The exploiter coudn't generate any exploit.")


@cli.command(help="Get suitable exploiters for a binary.")
@click.option(
    "--elf",
    type=click.Path(exists=True),
    required=True,
    help="Executables to be exploited",
)
@click.option(
    "--stream",
    type=click.Choice([stream.name for stream in InputStreams]),
    required=True,
    multiple=True,
    help="Input streams of the executable",
)
@click.option(
    "--mitigation",
    type=click.Choice([mitigation.name for mitigation in Mitigations]),
    required=True,
    multiple=True,
    help="Mitigation present in the executable",
)
@click.option(
    "--weakness",
    type=click.Choice([exploiter.name for exploiter in Weaknesses]),
    required=True,
    help="Weakness to be exploited",
)
def recommend(
    elf: str,
    stream: typing.List[str],
    mitigation: typing.List[str],
    weakness: str,
) -> None:
    input_streams = [getattr(InputStreams, s) for s in stream]
    mitigations = [getattr(Mitigations, m) for m in mitigation]
    weakness_enum = getattr(Weaknesses, weakness)

    for exploiter in get_suitable_exploiters(
        elf, input_streams, mitigations, weakness_enum
    ):
        print("Exploiters that can be used considering the context are:")
        print(f"- {_translate_exploiter_class_to_name(exploiter)}")


def main() -> None:
    cli(prog_name="automatic_exploit_generation")
