from dataclasses import dataclass

import pwn

from automatic_exploit_generation.common.process import (
    InputStream,
    create_process,
    execute_process,
    get_core,
)

PAYLOAD_LENGTH = 100
EXECUTABLE_NAME = "executable"

pwn.context.aslr = False


@dataclass
class BufferOverflowDetails:
    eip_offset: int


def analyze_bof(
    path: str, input_stream: InputStream, crashy_bytes: bytes
) -> BufferOverflowDetails:
    lenght = len(crashy_bytes)
    crashy_pattern = generate_cyclic_pattern(lenght)

    process = create_process(path, input_stream, crashy_pattern)
    execute_process(process)

    core = get_core(process)
    crash_address = core.fault_addr
    print(
        "The value that overwrites EIP and generates a crash is"
        f" {hex(crash_address)}."
    )

    offset = get_offset_in_cyclic_pattern(crash_address)
    print(f"The EIP offset in the payload is {offset}.")

    return BufferOverflowDetails(offset)


def generate_cyclic_pattern(length: int) -> bytes:
    return pwn.cyclic(length)


def get_offset_in_cyclic_pattern(subpattern: bytes) -> int:
    return pwn.cyclic_find(subpattern)
